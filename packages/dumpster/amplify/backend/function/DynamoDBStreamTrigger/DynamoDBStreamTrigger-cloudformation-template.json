{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Lambda resource stack creation using Amplify CLI",
	"Parameters": {
		"env": {
			"Type": "String"
		},
		"apitrashedGraphQLAPIIdOutput": {
			"Type": "String",
			"Default": "apitrashedGraphQLAPIIdOutput"
		},
		"apitrashedGraphQLAPIEndpointOutput": {
			"Type": "String",
			"Default": "apitrashedGraphQLAPIEndpointOutput"
		},
		"storagetrashcatBucketName": {
			"Type": "String",
			"Default": "storagetrashcatBucketName"
		},
		"authtrashed452c5745UserPoolId": {
			"Type": "String",
			"Default": "authtrashed452c5745UserPoolId"
		}
	},
	"Conditions": {
		"ShouldNotCreateEnvResources": {
			"Fn::Equals": [
				{
					"Ref": "env"
				},
				"NONE"
			]
		}
	},
	"Resources": {
		"LambdaFunction": {
			"Type": "AWS::Lambda::Function",
			"Metadata": {
				"aws:asset:path": "./src/dist",
				"aws:asset:property": "Code"
			},
			"Properties": {
				"Handler": "dist/bundle.handler",
				"FunctionName": {
					"Fn::If": [
						"ShouldNotCreateEnvResources",
						"DynamoDBStreamTrigger",
						{
							"Fn::Join": [
								"",
								[
									"DynamoDBStreamTrigger",
									"-",
									{
										"Ref": "env"
									}
								]
							]
						}
					]
				},
				"Environment": {
					"Variables": {
						"ENV": {
							"Ref": "env"
						},
						"REGION": {
							"Ref": "AWS::Region"
						},
						"API_TRASHED_GRAPHQLAPIIDOUTPUT": {
							"Ref": "apitrashedGraphQLAPIIdOutput"
						},
						"API_TRASHED_GRAPHQLAPIENDPOINTOUTPUT": {
							"Ref": "apitrashedGraphQLAPIEndpointOutput"
						},
						"STORAGE_TRASHCAT_BUCKETNAME": {
							"Ref": "storagetrashcatBucketName"
						},
						"AUTH_TRASHED452C5745_USERPOOLID": {
							"Ref": "authtrashed452c5745UserPoolId"
						},
						"MEDIACONVERT_IAM_ROLE_ARN": {
							"Fn::GetAtt": [
								"MediaConvertRole",
								"Arn"
							]
						}
					}
				},
				"Role": {
					"Fn::GetAtt": [
						"LambdaExecutionRole",
						"Arn"
					]
				},
				"Runtime": "nodejs10.x",
				"Timeout": "25",
				"Code": {
					"S3Bucket": "trashed-production-20190824131356-deployment",
					"S3Key": "amplify-builds/DynamoDBStreamTrigger-7150373079354e755450-build.zip"
				}
			}
		},
		"LambdaExecutionRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"RoleName": {
					"Fn::If": [
						"ShouldNotCreateEnvResources",
						"trashedLambdaRole73cc0fd8",
						{
							"Fn::Join": [
								"",
								[
									"trashedLambdaRole73cc0fd8",
									"-",
									{
										"Ref": "env"
									}
								]
							]
						}
					]
				},
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"lambda.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				}
			}
		},
		"lambdaexecutionpolicy": {
			"DependsOn": [
				"LambdaExecutionRole"
			],
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": "lambda-execution-policy",
				"Roles": [
					{
						"Ref": "LambdaExecutionRole"
					}
				],
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Action": [
								"logs:CreateLogGroup",
								"logs:CreateLogStream",
								"logs:PutLogEvents"
							],
							"Resource": {
								"Fn::Sub": [
									"arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*",
									{
										"region": {
											"Ref": "AWS::Region"
										},
										"account": {
											"Ref": "AWS::AccountId"
										},
										"lambda": {
											"Ref": "LambdaFunction"
										}
									}
								]
							}
						},
						{
							"Effect": "Allow",
							"Action": [
								"dynamodb:DescribeStream",
								"dynamodb:GetRecords",
								"dynamodb:GetShardIterator",
								"dynamodb:ListStreams"
							],
							"Resource": {
								"Fn::ImportValue": {
									"Fn::Sub": "${apitrashedGraphQLAPIIdOutput}:GetAtt:VideoTable:StreamArn"
								}
							}
						}
					]
				}
			}
		},
		"AmplifyResourcesPolicy": {
			"DependsOn": [
				"LambdaExecutionRole"
			],
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": "amplify-lambda-execution-policy",
				"Roles": [
					{
						"Ref": "LambdaExecutionRole"
					}
				],
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Action": [
								"cognito-idp:ConfirmSignUp",
								"cognito-idp:AdminCreateUser",
								"cognito-idp:CreateUserImportJob",
								"cognito-idp:AdminSetUserSettings",
								"cognito-idp:AdminLinkProviderForUser",
								"cognito-idp:CreateIdentityProvider",
								"cognito-idp:AdminConfirmSignUp",
								"cognito-idp:AdminDisableUser",
								"cognito-idp:AdminRemoveUserFromGroup",
								"cognito-idp:SetUserMFAPreference",
								"cognito-idp:SetUICustomization",
								"cognito-idp:SignUp",
								"cognito-idp:VerifyUserAttribute",
								"cognito-idp:SetRiskConfiguration",
								"cognito-idp:StartUserImportJob",
								"cognito-idp:AdminSetUserPassword",
								"cognito-idp:AssociateSoftwareToken",
								"cognito-idp:CreateResourceServer",
								"cognito-idp:RespondToAuthChallenge",
								"cognito-idp:CreateUserPoolClient",
								"cognito-idp:AdminUserGlobalSignOut",
								"cognito-idp:GlobalSignOut",
								"cognito-idp:AddCustomAttributes",
								"cognito-idp:CreateGroup",
								"cognito-idp:CreateUserPool",
								"cognito-idp:AdminForgetDevice",
								"cognito-idp:AdminAddUserToGroup",
								"cognito-idp:AdminRespondToAuthChallenge",
								"cognito-idp:ForgetDevice",
								"cognito-idp:CreateUserPoolDomain",
								"cognito-idp:AdminEnableUser",
								"cognito-idp:AdminUpdateDeviceStatus",
								"cognito-idp:StopUserImportJob",
								"cognito-idp:InitiateAuth",
								"cognito-idp:AdminInitiateAuth",
								"cognito-idp:AdminSetUserMFAPreference",
								"cognito-idp:ConfirmForgotPassword",
								"cognito-idp:SetUserSettings",
								"cognito-idp:VerifySoftwareToken",
								"cognito-idp:AdminDisableProviderForUser",
								"cognito-idp:SetUserPoolMfaConfig",
								"cognito-idp:ChangePassword",
								"cognito-idp:ConfirmDevice",
								"cognito-idp:AdminResetUserPassword",
								"cognito-idp:ResendConfirmationCode",
								"cognito-identity:Describe*",
								"cognito-identity:Get*",
								"cognito-identity:List*",
								"cognito-idp:Describe*",
								"cognito-idp:AdminGetDevice",
								"cognito-idp:AdminGetUser",
								"cognito-idp:AdminList*",
								"cognito-idp:List*",
								"cognito-sync:Describe*",
								"cognito-sync:Get*",
								"cognito-sync:List*",
								"iam:ListOpenIdConnectProviders",
								"iam:ListRoles",
								"sns:ListPlatformApplications",
								"cognito-idp:ForgotPassword",
								"cognito-idp:UpdateAuthEventFeedback",
								"cognito-idp:UpdateResourceServer",
								"cognito-idp:UpdateUserPoolClient",
								"cognito-idp:AdminUpdateUserAttributes",
								"cognito-idp:UpdateUserAttributes",
								"cognito-idp:UpdateUserPoolDomain",
								"cognito-idp:UpdateIdentityProvider",
								"cognito-idp:UpdateGroup",
								"cognito-idp:AdminUpdateAuthEventFeedback",
								"cognito-idp:UpdateDeviceStatus",
								"cognito-idp:UpdateUserPool",
								"cognito-idp:DeleteUserPoolDomain",
								"cognito-idp:DeleteResourceServer",
								"cognito-idp:DeleteGroup",
								"cognito-idp:AdminDeleteUserAttributes",
								"cognito-idp:DeleteUserPoolClient",
								"cognito-idp:DeleteUserAttributes",
								"cognito-idp:DeleteUserPool",
								"cognito-idp:AdminDeleteUser",
								"cognito-idp:DeleteIdentityProvider",
								"cognito-idp:DeleteUser"
							],
							"Resource": [
								{
									"Fn::Join": [
										"",
										[
											"arn:aws:cognito-idp:",
											{
												"Ref": "AWS::Region"
											},
											":",
											{
												"Ref": "AWS::AccountId"
											},
											":userpool/",
											{
												"Ref": "authtrashed452c5745UserPoolId"
											}
										]
									]
								}
							]
						},
						{
							"Effect": "Allow",
							"Action": [
								"appsync:Create*",
								"appsync:StartSchemaCreation",
								"appsync:GraphQL",
								"appsync:Get*",
								"appsync:List*",
								"appsync:Update*"
							],
							"Resource": [
								{
									"Fn::Join": [
										"",
										[
											"arn:aws:appsync:",
											{
												"Ref": "AWS::Region"
											},
											":",
											{
												"Ref": "AWS::AccountId"
											},
											":apis/",
											{
												"Ref": "apitrashedGraphQLAPIIdOutput"
											},
											"/*"
										]
									]
								}
							]
						},
						{
							"Effect": "Allow",
							"Action": [
								"s3:PutObject",
								"s3:GetObject",
								"s3:ListBucket"
							],
							"Resource": [
								{
									"Fn::Join": [
										"",
										[
											"arn:aws:s3:::",
											{
												"Ref": "storagetrashcatBucketName"
											},
											"/*"
										]
									]
								}
							]
						}
					]
				}
			}
		},
		"LambdaEventSourceMapping": {
			"DependsOn": [
				"lambdaexecutionpolicy"
			],
			"Type": "AWS::Lambda::EventSourceMapping",
			"Properties": {
				"BatchSize": 1,
				"FunctionName": {
					"Fn::GetAtt": [
						"LambdaFunction",
						"Arn"
					]
				},
				"EventSourceArn": {
					"Fn::ImportValue": {
						"Fn::Sub": "${apitrashedGraphQLAPIIdOutput}:GetAtt:VideoTable:StreamArn"
					}
				},
				"Enabled": true,
				"MaximumBatchingWindowInSeconds": 0,
				"StartingPosition": "TRIM_HORIZON"
			}
		},
		"MediaConvertRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"RoleName": {
					"Fn::If": [
						"ShouldNotCreateEnvResources",
						"trashedMediaConvertRole73cc0fd8",
						{
							"Fn::Join": [
								"",
								[
									"trashedMediaConvertRole73cc0fd8",
									"-",
									{
										"Ref": "env"
									}
								]
							]
						}
					]
				},
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"mediaconvert.amazonaws.com",
									"mediaconvert.us-east-1.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				}
			}
		},
		"LambdaMediaConvertResourcesPolicy": {
			"Type": "AWS::IAM::Policy",
			"DependsOn": [
				"LambdaExecutionRole"
			],
			"Properties": {
				"PolicyName": "lambda-execution-pass-role-media-convert",
				"Roles": [
					{
						"Ref": "LambdaExecutionRole"
					}
				],
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Action": [
								"mediaconvert:CreateJob"
							],
							"Resource": [
								"*"
							]
						},
						{
							"Effect": "Allow",
							"Action": [
								"iam:PassRole"
							],
							"Resource": {
								"Fn::GetAtt": [
									"MediaConvertRole",
									"Arn"
								]
							}
						}
					]
				}
			}
		},
		"MediaConvertPolicy": {
			"Type": "AWS::IAM::Policy",
			"DependsOn": [
				"MediaConvertRole"
			],
			"Properties": {
				"PolicyName": "media-convert-policy",
				"Roles": [
					{
						"Ref": "MediaConvertRole"
					}
				],
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Action": [
								"sns:*",
								"logs:*",
								"cloudwatch:*",
								"autoscaling:Describe*"
							],
							"Resource": [
								"*"
							]
						},
						{
							"Effect": "Allow",
							"Action": [
								"s3:*"
							],
							"Resource": [
								"*"
							]
						}
					]
				}
			}
		}
	},
	"Outputs": {
		"Name": {
			"Value": {
				"Ref": "LambdaFunction"
			}
		},
		"Arn": {
			"Value": {
				"Fn::GetAtt": [
					"LambdaFunction",
					"Arn"
				]
			}
		},
		"Region": {
			"Value": {
				"Ref": "AWS::Region"
			}
		},
		"LambdaExecutionRole": {
			"Value": {
				"Ref": "LambdaExecutionRole"
			}
		},
		"MediaConvertRoleArn": {
			"Value": {
				"Fn::GetAtt": [
					"MediaConvertRole",
					"Arn"
				]
			}
		}
	}
}